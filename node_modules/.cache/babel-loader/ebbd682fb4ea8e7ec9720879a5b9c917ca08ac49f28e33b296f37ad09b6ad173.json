{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/Job/JobDetailed/JobDetailed.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectCurrentJob } from \"../../redux/jobSlice\";\nimport Body from \"./Body/Body\";\nimport Header from \"./Header/Header\";\nimport styles from \"./JobDetailed.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobDetailed = props => {\n  const {\n    currentJob\n  } = props;\n  const parseSalary = data => {\n    return data.replaceAll(\"k\", \" 000\");\n  };\n  const parseDescription = date => {\n    const parsedData = [];\n    const parsedText = date.split(/\\r\\n|\\t|\\r|\\n/g).map(item => item.trimStart().trimEnd()).filter(item => item !== \"\");\n    for (let i = 0; i < parsedText.length; i++) {\n      const current = parsedText[i];\n      const next = parsedText[i + 1];\n      if (current.includes(\":\") && !next.includes(\":\")) {\n        parsedData.push([current, next]);\n        i = parsedText.indexOf(next);\n        continue;\n      }\n      parsedData.push([current]);\n    }\n    return parsedData;\n  };\n  if (!currentJob) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"pidor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 27\n  }, this);\n  const {\n    title,\n    salary,\n    description,\n    createdAt,\n    updatedAt\n  } = currentJob;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.information,\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Job Details\",\n        subTitles: [[\"M17,18L12,15.82L7,18V5H17M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z\", \"Save to my list\"]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Body, {\n        title,\n        salary: parseSalary(salary),\n        createdAt,\n        updatedAt,\n        parsedDescription: parseDescription(description)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_c = JobDetailed;\nconst mapStatetoProps = state => ({\n  currentJob: selectCurrentJob(state)\n});\nconst mapDispatchToProps = dispatch => ({});\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobDetailed);\nvar _c;\n$RefreshReg$(_c, \"JobDetailed\");","map":{"version":3,"names":["React","connect","selectCurrentJob","Body","Header","styles","JobDetailed","props","currentJob","parseSalary","data","replaceAll","parseDescription","date","parsedData","parsedText","split","map","item","trimStart","trimEnd","filter","i","length","current","next","includes","push","indexOf","title","salary","description","createdAt","updatedAt","container","information","subTitles","parsedDescription","mapStatetoProps","state","mapDispatchToProps","dispatch"],"sources":["/Users/o.g_vlad/vscode/job-app/src/Job/JobDetailed/JobDetailed.tsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { JobType, selectCurrentJob } from \"../../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../../redux/store\";\nimport Body from \"./Body/Body\";\nimport Header from \"./Header/Header\";\nimport styles from \"./JobDetailed.module.scss\";\n\ntype JobDetailedProps = {\n  currentJob: JobType | null;\n};\n\nconst JobDetailed: React.FC<JobDetailedProps> = (props: JobDetailedProps) => {\n  const { currentJob } = props;\n\n  const parseSalary = (data: string): string => {\n    return data.replaceAll(\"k\", \" 000\");\n  };\n\n  const parseDescription = (date: string): Array<Array<string>> => {\n    const parsedData: Array<Array<string>> = [];\n    const parsedText = date\n      .split(/\\r\\n|\\t|\\r|\\n/g)\n      .map((item) => item.trimStart().trimEnd())\n      .filter((item) => item !== \"\");\n    for (let i = 0; i < parsedText.length; i++) {\n      const current = parsedText[i];\n      const next = parsedText[i + 1];\n      if (current.includes(\":\") && !next.includes(\":\")) {\n        parsedData.push([current, next]);\n        i = parsedText.indexOf(next);\n        continue;\n      }\n      parsedData.push([current]);\n    }\n    return parsedData;\n  };\n\n  if (!currentJob) return <div>pidor</div>;\n  const { title, salary, description, createdAt, updatedAt } = currentJob;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.information}>\n        <Header\n          {...{\n            title: \"Job Details\",\n            subTitles: [\n              [\n                \"M17,18L12,15.82L7,18V5H17M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z\",\n                \"Save to my list\",\n              ],\n            ],\n          }}\n        />\n        <Body\n          {...{\n            title,\n            salary: parseSalary(salary),\n            createdAt,\n            updatedAt,\n            parsedDescription: parseDescription(description),\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  currentJob: selectCurrentJob(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({});\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobDetailed);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAAkBC,gBAAgB,QAAQ,sBAAsB;AAEhE,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,MAAM,MAAM,2BAA2B;AAAC;AAM/C,MAAMC,WAAuC,GAAIC,KAAuB,IAAK;EAC3E,MAAM;IAAEC;EAAW,CAAC,GAAGD,KAAK;EAE5B,MAAME,WAAW,GAAIC,IAAY,IAAa;IAC5C,OAAOA,IAAI,CAACC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC;EACrC,CAAC;EAED,MAAMC,gBAAgB,GAAIC,IAAY,IAA2B;IAC/D,MAAMC,UAAgC,GAAG,EAAE;IAC3C,MAAMC,UAAU,GAAGF,IAAI,CACpBG,KAAK,CAAC,gBAAgB,CAAC,CACvBC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,SAAS,EAAE,CAACC,OAAO,EAAE,CAAC,CACzCC,MAAM,CAAEH,IAAI,IAAKA,IAAI,KAAK,EAAE,CAAC;IAChC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,MAAME,OAAO,GAAGT,UAAU,CAACO,CAAC,CAAC;MAC7B,MAAMG,IAAI,GAAGV,UAAU,CAACO,CAAC,GAAG,CAAC,CAAC;MAC9B,IAAIE,OAAO,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAACD,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAChDZ,UAAU,CAACa,IAAI,CAAC,CAACH,OAAO,EAAEC,IAAI,CAAC,CAAC;QAChCH,CAAC,GAAGP,UAAU,CAACa,OAAO,CAACH,IAAI,CAAC;QAC5B;MACF;MACAX,UAAU,CAACa,IAAI,CAAC,CAACH,OAAO,CAAC,CAAC;IAC5B;IACA,OAAOV,UAAU;EACnB,CAAC;EAED,IAAI,CAACN,UAAU,EAAE,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAgB;EACxC,MAAM;IAAEqB,KAAK;IAAEC,MAAM;IAAEC,WAAW;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAGzB,UAAU;EAEvE,oBACE;IAAK,SAAS,EAAEH,MAAM,CAAC6B,SAAU;IAAA,uBAC/B;MAAK,SAAS,EAAE7B,MAAM,CAAC8B,WAAY;MAAA,wBACjC,QAAC,MAAM;QAEHN,KAAK,EAAE,aAAa;QACpBO,SAAS,EAAE,CACT,CACE,sFAAsF,EACtF,iBAAiB,CAClB;MACF;QAAA;QAAA;QAAA;MAAA,QAEH,eACF,QAAC,IAAI;QAEDP,KAAK;QACLC,MAAM,EAAErB,WAAW,CAACqB,MAAM,CAAC;QAC3BE,SAAS;QACTC,SAAS;QACTI,iBAAiB,EAAEzB,gBAAgB,CAACmB,WAAW;MAAC;QAAA;QAAA;QAAA;MAAA,QAElD;IAAA;MAAA;MAAA;MAAA;IAAA;EACE;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,KAvDIzB,WAAuC;AAyD7C,MAAMgC,eAAe,GAAIC,KAAgB,KAAM;EAC7C/B,UAAU,EAAEN,gBAAgB,CAACqC,KAAK;AACpC,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAIC,QAAqB,KAAM,CAAC,CAAC,CAAC;AAE1D,eAAexC,OAAO,CAACqC,eAAe,EAAEE,kBAAkB,CAAC,CAAClC,WAAW,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}