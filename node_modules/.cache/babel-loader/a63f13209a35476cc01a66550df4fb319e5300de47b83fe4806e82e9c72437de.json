{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { usePagination } from \"../redux/hooks\";\nimport { selectCurrnetTags, selectJobsList, setCurrentJob, setTag } from \"../redux/jobSlice\";\nimport Job from \"./Job\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const compareTags = (first, second) => {\n  for (const element of first) {\n    if (!second.includes(element)) return false;\n  }\n  return true;\n};\nconst getGeoData = async location => {\n  return await getGeocode({\n    location\n  }).then(data => data[0].formatted_address);\n};\nconst sortJobs = (list, selectedTags) => {\n  const res = [];\n  for (const job of list) {\n    const {\n      benefits,\n      employment_type\n    } = job;\n    const jobTags = benefits.concat(employment_type);\n    if (compareTags(selectedTags, jobTags)) {\n      res.push(job);\n    }\n  }\n  return res;\n};\nconst JobContainer = props => {\n  _s();\n  const {\n    list,\n    tags,\n    onSetCurrentJob,\n    onSetTag\n  } = props;\n  const [data, setData] = useState({\n    list,\n    tags\n  });\n  const sortedList = sortJobs(data.list, data.tags);\n  const {\n    firstContentIndex,\n    lastContentIndex,\n    nextPage,\n    prevPage,\n    page,\n    setPage,\n    totalPages\n  } = usePagination({\n    contentPerPage: 4,\n    count: tags ? sortedList.length : list.length\n  });\n  useEffect(() => {\n    setData({\n      list,\n      tags\n    });\n  }, [list, tags]);\n  console.log(\"render\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!tags.length ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(AdditionalInfo, {\n      title: \"Tags\",\n      data: [{\n        heading: \"Selected tags\",\n        elements: data.tags,\n        style: \"max-w-1/3 min-w-fit text-center p-3 w-1/5 border border-blue-500 rounded-xl text-blue-500 bg-blue-100  hover:bg-blue-300 active:ring-4 focus:ring-blue-300\"\n      }],\n      onSetTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), sortedList.length ? sortedList.slice(firstContentIndex, lastContentIndex).map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: {\n        ...item\n      },\n      onSetCurrentJob: onSetCurrentJob,\n      country: getGeoData(item.location)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }, this)) : data.list.map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: {\n        ...item\n      },\n      country: getGeoData(item.location),\n      onSetCurrentJob: onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: [page, \"/\", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevPage,\n        className: \"page\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), [...Array(totalPages).keys()].map(el => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(el + 1),\n        className: `page ${page === el + 1 ? \"active\" : \"\"}`,\n        children: el + 1\n      }, el, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPage,\n        className: \"page\",\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(JobContainer, \"67APS0FGT2rCk+h+18q61NqSQAY=\", false, function () {\n  return [usePagination];\n});\n_c = JobContainer;\nconst mapStatetoProps = state => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSetCurrentJob: data => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: tag => {\n    dispatch(setTag(tag));\n  }\n});\nexport default /*#__PURE__*/React.memo(connect(mapStatetoProps, mapDispatchToProps)(JobContainer));\nvar _c;\n$RefreshReg$(_c, \"JobContainer\");","map":{"version":3,"names":["React","useEffect","useState","connect","getGeocode","AdditionalInfo","usePagination","selectCurrnetTags","selectJobsList","setCurrentJob","setTag","Job","compareTags","first","second","element","includes","getGeoData","location","then","data","formatted_address","sortJobs","list","selectedTags","res","job","benefits","employment_type","jobTags","concat","push","JobContainer","props","tags","onSetCurrentJob","onSetTag","setData","sortedList","firstContentIndex","lastContentIndex","nextPage","prevPage","page","setPage","totalPages","contentPerPage","count","length","console","log","title","heading","elements","style","slice","map","item","idx","Array","keys","el","mapStatetoProps","state","mapDispatchToProps","dispatch","tag","memo"],"sources":["/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { usePagination } from \"../redux/hooks\";\nimport {\n  JobType,\n  LocationType,\n  selectCurrnetTags,\n  selectJobsList,\n  setCurrentJob,\n  setTag,\n} from \"../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport Job from \"./Job\";\n\ntype JobContainerProps = {\n  list: JobType[];\n  tags: Array<string>;\n  onSetCurrentJob: (data: JobType) => void;\n  onSetTag: (tag: string) => void;\n};\n\nexport const compareTags = (first: Array<any>, second: Array<any>): boolean => {\n  for (const element of first) {\n    if (!second.includes(element)) return false;\n  }\n  return true;\n};\n\nconst getGeoData = async (location: LocationType) => {\n  return await getGeocode({\n    location,\n  }).then((data) => data[0].formatted_address);\n};\n\nconst sortJobs = (\n  list: Array<JobType>,\n  selectedTags: Array<string>\n): Array<JobType> => {\n  const res: Array<JobType> = [];\n  for (const job of list) {\n    const { benefits, employment_type } = job;\n    const jobTags = benefits.concat(employment_type);\n    if (compareTags(selectedTags, jobTags)) {\n      res.push(job);\n    }\n  }\n  return res;\n};\n\nconst JobContainer: React.FC<JobContainerProps> = (\n  props: JobContainerProps\n) => {\n  const { list, tags, onSetCurrentJob, onSetTag } = props;\n  const [data, setData] = useState({ list, tags });\n  const sortedList = sortJobs(data.list, data.tags);\n\n  const {\n    firstContentIndex,\n    lastContentIndex,\n    nextPage,\n    prevPage,\n    page,\n    setPage,\n    totalPages,\n  } = usePagination({\n    contentPerPage: 4,\n    count: tags ? sortedList.length : list.length,\n  });\n\n  useEffect(() => {\n    setData({ list, tags });\n  }, [list, tags]);\n  console.log(\"render\");\n\n  return (\n    <div>\n      {!tags.length ? (\n        <></>\n      ) : (\n        <AdditionalInfo\n          {...{\n            title: \"Tags\",\n            data: [\n              {\n                heading: \"Selected tags\",\n                elements: data.tags,\n                style:\n                  \"max-w-1/3 min-w-fit text-center p-3 w-1/5 border border-blue-500 rounded-xl text-blue-500 bg-blue-100  hover:bg-blue-300 active:ring-4 focus:ring-blue-300\",\n              },\n            ],\n            onSetTag,\n          }}\n        />\n      )}\n      {sortedList.length\n        ? sortedList\n            .slice(firstContentIndex, lastContentIndex)\n            .map((item: JobType, idx) => (\n              <Job\n                data={{ ...item }}\n                onSetCurrentJob={onSetCurrentJob}\n                key={idx}\n                country={getGeoData(item.location)}\n              />\n            ))\n        : data.list.map((item: JobType, idx) => (\n            <Job\n              data={{ ...item }}\n              country={getGeoData(item.location)}\n              onSetCurrentJob={onSetCurrentJob}\n              key={idx}\n            />\n          ))}\n      <div className=\"pagination\">\n        <p className=\"text\">\n          {page}/{totalPages}\n        </p>\n        <button onClick={prevPage} className=\"page\">\n          &larr;\n        </button>\n        {/* @ts-ignore */}\n        {[...Array(totalPages).keys()].map((el) => (\n          <button\n            onClick={() => setPage(el + 1)}\n            key={el}\n            className={`page ${page === el + 1 ? \"active\" : \"\"}`}\n          >\n            {el + 1}\n          </button>\n        ))}\n        <button onClick={nextPage} className=\"page\">\n          &rarr;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSetCurrentJob: (data: JobType) => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: (tag: string) => {\n    dispatch(setTag(tag));\n  },\n});\n\nexport default React.memo(\n  connect(mapStatetoProps, mapDispatchToProps)(JobContainer)\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}