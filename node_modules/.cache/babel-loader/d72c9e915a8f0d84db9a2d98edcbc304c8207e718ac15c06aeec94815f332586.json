{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { selectCurrnetTags, selectJobsList, setCurrentJob, setTag } from \"../redux/jobSlice\";\nimport Job from \"./Job\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortJobs = (list, selectedTags) => {\n  const res = [];\n  for (const job of list) {\n    const {\n      benefits,\n      employment_type\n    } = job;\n    const jobTags = benefits.concat(employment_type);\n    const common = selectedTags.filter(item => jobTags.indexOf(item) !== -1);\n    if (common.length) {\n      res.push(job);\n    }\n  }\n  return res;\n};\nconst JobContainer = props => {\n  const {\n    list,\n    tags,\n    onSetCurrentJob,\n    onSetTag\n  } = props;\n  const sortedList = sortJobs(list, tags);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!tags.length ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(AdditionalInfo, {\n      title: \"Tags\",\n      data: [{\n        heading: \"Selected tags\",\n        elements: tags\n      }],\n      onSetTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), sortedList.length ? sortedList.map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: item,\n      onSetCurrentJob: onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)) : list.map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: item,\n      onSetCurrentJob: onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = JobContainer;\nconst mapStatetoProps = state => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSetCurrentJob: data => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: tag => {\n    dispatch(setTag(tag));\n  }\n});\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\nvar _c;\n$RefreshReg$(_c, \"JobContainer\");","map":{"version":3,"names":["React","connect","AdditionalInfo","selectCurrnetTags","selectJobsList","setCurrentJob","setTag","Job","sortJobs","list","selectedTags","res","job","benefits","employment_type","jobTags","concat","common","filter","item","indexOf","length","push","JobContainer","props","tags","onSetCurrentJob","onSetTag","sortedList","title","data","heading","elements","map","idx","mapStatetoProps","state","mapDispatchToProps","dispatch","tag"],"sources":["/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport {\n  JobType,\n  selectCurrnetTags,\n  selectJobsList,\n  setCurrentJob,\n  setTag,\n} from \"../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport Job from \"./Job\";\n\ntype JobContainerProps = {\n  list: JobType[];\n  tags: Array<string>;\n  onSetCurrentJob: (data: JobType) => void;\n  onSetTag: (tag: string) => void;\n};\n\nconst sortJobs = (list: Array<JobType>, selectedTags: Array<string>) => {\n  const res: Array<JobType> = [];\n  for (const job of list) {\n    const { benefits, employment_type } = job;\n    const jobTags = benefits.concat(employment_type);\n    const common = selectedTags.filter((item) => jobTags.indexOf(item) !== -1);\n    if (common.length) {\n      res.push(job);\n    }\n  }\n  return res;\n};\n\nconst JobContainer: React.FC<JobContainerProps> = (\n  props: JobContainerProps\n) => {\n  const { list, tags, onSetCurrentJob, onSetTag } = props;\n  const sortedList = sortJobs(list, tags);\n\n  return (\n    <div>\n      {!tags.length ? (\n        <></>\n      ) : (\n        <AdditionalInfo\n          {...{\n            title: \"Tags\",\n            data: [{ heading: \"Selected tags\", elements: tags }],\n            onSetTag,\n          }}\n        />\n      )}\n      {sortedList.length\n        ? sortedList.map((item: JobType, idx) => (\n            <Job data={item} onSetCurrentJob={onSetCurrentJob} key={idx} />\n          ))\n        : list.map((item: JobType, idx) => (\n            <Job data={item} onSetCurrentJob={onSetCurrentJob} key={idx} />\n          ))}\n    </div>\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSetCurrentJob: (data: JobType) => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: (tag: string) => {\n    dispatch(setTag(tag));\n  },\n});\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,cAAc,MAAM,8CAA8C;AACzE,SAEEC,iBAAiB,EACjBC,cAAc,EACdC,aAAa,EACbC,MAAM,QACD,mBAAmB;AAE1B,OAAOC,GAAG,MAAM,OAAO;AAAC;AAAA;AASxB,MAAMC,QAAQ,GAAG,CAACC,IAAoB,EAAEC,YAA2B,KAAK;EACtE,MAAMC,GAAmB,GAAG,EAAE;EAC9B,KAAK,MAAMC,GAAG,IAAIH,IAAI,EAAE;IACtB,MAAM;MAAEI,QAAQ;MAAEC;IAAgB,CAAC,GAAGF,GAAG;IACzC,MAAMG,OAAO,GAAGF,QAAQ,CAACG,MAAM,CAACF,eAAe,CAAC;IAChD,MAAMG,MAAM,GAAGP,YAAY,CAACQ,MAAM,CAAEC,IAAI,IAAKJ,OAAO,CAACK,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1E,IAAIF,MAAM,CAACI,MAAM,EAAE;MACjBV,GAAG,CAACW,IAAI,CAACV,GAAG,CAAC;IACf;EACF;EACA,OAAOD,GAAG;AACZ,CAAC;AAED,MAAMY,YAAyC,GAC7CC,KAAwB,IACrB;EACH,MAAM;IAAEf,IAAI;IAAEgB,IAAI;IAAEC,eAAe;IAAEC;EAAS,CAAC,GAAGH,KAAK;EACvD,MAAMI,UAAU,GAAGpB,QAAQ,CAACC,IAAI,EAAEgB,IAAI,CAAC;EAEvC,oBACE;IAAA,WACG,CAACA,IAAI,CAACJ,MAAM,gBACX,qCAAK,gBAEL,QAAC,cAAc;MAEXQ,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,CAAC;QAAEC,OAAO,EAAE,eAAe;QAAEC,QAAQ,EAAEP;MAAK,CAAC,CAAC;MACpDE;IAAQ;MAAA;MAAA;MAAA;IAAA,QAGb,EACAC,UAAU,CAACP,MAAM,GACdO,UAAU,CAACK,GAAG,CAAC,CAACd,IAAa,EAAEe,GAAG,kBAChC,QAAC,GAAG;MAAC,IAAI,EAAEf,IAAK;MAAC,eAAe,EAAEO;IAAgB,GAAMQ,GAAG;MAAA;MAAA;MAAA;IAAA,QAC5D,CAAC,GACFzB,IAAI,CAACwB,GAAG,CAAC,CAACd,IAAa,EAAEe,GAAG,kBAC1B,QAAC,GAAG;MAAC,IAAI,EAAEf,IAAK;MAAC,eAAe,EAAEO;IAAgB,GAAMQ,GAAG;MAAA;MAAA;MAAA;IAAA,QAC5D,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,KA5BIX,YAAyC;AA8B/C,MAAMY,eAAe,GAAIC,KAAgB,KAAM;EAC7C3B,IAAI,EAAEL,cAAc,CAACgC,KAAK,CAAC;EAC3BX,IAAI,EAAEtB,iBAAiB,CAACiC,KAAK;AAC/B,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAIC,QAAqB,KAAM;EACrDZ,eAAe,EAAGI,IAAa,IAAK;IAClCQ,QAAQ,CAACjC,aAAa,CAACyB,IAAI,CAAC,CAAC;EAC/B,CAAC;EACDH,QAAQ,EAAGY,GAAW,IAAK;IACzBD,QAAQ,CAAChC,MAAM,CAACiC,GAAG,CAAC,CAAC;EACvB;AACF,CAAC,CAAC;AAEF,eAAetC,OAAO,CAACkC,eAAe,EAAEE,kBAAkB,CAAC,CAACd,YAAY,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}