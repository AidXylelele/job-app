{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nconst pidor = item => {\n  return setTimeout(() => {\n    getGeocode({\n      location: item.location\n    }).then(data => {\n      const address = data[0].formatted_address;\n      return item = {\n        ...item,\n        address\n      };\n    });\n    return item;\n  }, 1000);\n};\nexport const thunkSetJobs = () => async dispatch => {\n  let list = await getJobsRequest();\n  list.map(item => {\n    item.location = locations[Math.floor(Math.random() * locations.length)];\n    return item;\n  });\n  for (let item of list) {\n    {\n      /* @ts-ignore */\n    }\n    item = pidor(item);\n  }\n  dispatch(setJobsList(list));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","getGeocode","locations","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","pidor","setTimeout","location","then","data","address","formatted_address","thunkSetJobs","dispatch","map","Math","floor","random","length","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nconst pidor = (item: JobType) => {\n  return setTimeout(() => {\n    getGeocode({\n      location: item.location,\n    }).then((data) => {\n      const address = data[0].formatted_address;\n      return (item = { ...item, address });\n    });\n    return item;\n  }, 1000);\n};\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  let list = await getJobsRequest();\n\n  list.map((item) => {\n    item.location = locations[Math.floor(Math.random() * locations.length)];\n    return item;\n  });\n\n  for (let item of list) {\n    {\n      /* @ts-ignore */\n    }\n    item = pidor(item);\n  }\n  dispatch(setJobsList(list));\n};\n\nexport default jobsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAOC,cAAc,MAAM,0BAA0B;AAGrD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,SAAS,QAAQ,mBAAmB;AA8B7C,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAI;EAChBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;EACnCS,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAK,EAAEC,MAAqC,KAAK;MAC7DD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,aAAa,EAAE,CAACH,KAAK,EAAEC,MAA8B,KAAK;MACxDD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDE,MAAM,EAAE,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MAChD,MAAMI,GAAG,GAAGJ,MAAM,CAACC,OAAO;MAC1B,IAAIF,KAAK,CAACL,IAAI,CAACW,QAAQ,CAACD,GAAG,CAAC,EAAE;QAC5BL,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACY,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKH,GAAG,CAAC;MACxD,CAAC,MAAM;QACLL,KAAK,CAACL,IAAI,CAACc,IAAI,CAACJ,GAAG,CAAC;MACtB;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,WAAW;EAAEI,aAAa;EAAEC;AAAO,CAAC,GAAGR,SAAS,CAACc,OAAO;AAEvE,OAAO,MAAMC,cAAc,GAAIX,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAACnB,IAAI;AACnE,OAAO,MAAMoB,gBAAgB,GAAIb,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAAClB,UAAU;AAC3E,OAAO,MAAMoB,iBAAiB,GAAId,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAACjB,IAAI;AAEtE,MAAMoB,KAAK,GAAIP,IAAa,IAAK;EAC/B,OAAOQ,UAAU,CAAC,MAAM;IACtB1B,UAAU,CAAC;MACT2B,QAAQ,EAAET,IAAI,CAACS;IACjB,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MAChB,MAAMC,OAAO,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACE,iBAAiB;MACzC,OAAQb,IAAI,GAAG;QAAE,GAAGA,IAAI;QAAEY;MAAQ,CAAC;IACrC,CAAC,CAAC;IACF,OAAOZ,IAAI;EACb,CAAC,EAAE,IAAI,CAAC;AACV,CAAC;AAED,OAAO,MAAMc,YAAY,GAAG,MAAgB,MAAOC,QAAQ,IAAK;EAC9D,IAAI9B,IAAI,GAAG,MAAMJ,cAAc,EAAE;EAEjCI,IAAI,CAAC+B,GAAG,CAAEhB,IAAI,IAAK;IACjBA,IAAI,CAACS,QAAQ,GAAG1B,SAAS,CAACkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGpC,SAAS,CAACqC,MAAM,CAAC,CAAC;IACvE,OAAOpB,IAAI;EACb,CAAC,CAAC;EAEF,KAAK,IAAIA,IAAI,IAAIf,IAAI,EAAE;IACrB;MACE;IAAA;IAEFe,IAAI,GAAGO,KAAK,CAACP,IAAI,CAAC;EACpB;EACAe,QAAQ,CAACxB,WAAW,CAACN,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED,eAAeG,SAAS,CAACiC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}