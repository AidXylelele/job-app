{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/JobDetailed/JobDetailedContainer.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectCurrentJob, setTag } from \"../redux/jobSlice\";\nimport { countDate } from \"../Job/Job\";\nimport JobDetailedPage from \"./JobDetailedPage\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  lat: 24.47,\n  long: 54.37\n}, {\n  lat: 49.61,\n  long: 6.13\n}, {\n  lat: 37.98,\n  long: 23.73\n}, {\n  lat: 40.38,\n  long: 49.89\n}, {\n  lat: 52.52,\n  long: 13.41\n}, {\n  lat: 39.91,\n  long: 116.4\n}, {\n  lat: 59.91,\n  long: 10.75\n}, {\n  lat: 60.17,\n  long: 24.94\n}];\nconst JobDetailedContainer = props => {\n  const {\n    currentJob,\n    onSetTag\n  } = props;\n  const parseSalary = data => data.replaceAll(\"k\", \" 000\");\n  const parseDescription = date => {\n    const parsedData = [];\n    const parsedText = date.split(/\\r\\n|\\t|\\r|\\n/g).map(item => item.trimStart().trimEnd()).filter(item => item !== \"\");\n    for (let i = 0; i < parsedText.length; i++) {\n      const current = parsedText[i];\n      const next = parsedText[i + 1];\n      if (current.includes(\":\") && !next.includes(\":\")) {\n        parsedData.push([current, next]);\n        i = parsedText.indexOf(next);\n        continue;\n      }\n      parsedData.push([current]);\n    }\n    return parsedData;\n  };\n  if (!currentJob) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"pidor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 27\n  }, this);\n  const {\n    title,\n    salary,\n    description,\n    createdAt,\n    updatedAt,\n    benefits,\n    employment_type,\n    pictures\n  } = currentJob;\n  const location = data[Math.floor(Math.random() * data.length)];\n  getGeocode({\n    location: {\n      lat: location.lat,\n      lng: location.long\n    }\n  }).then(data => console.log(data[0]));\n  const date = countDate(createdAt, updatedAt);\n  const parsedSalary = parseSalary(salary);\n  const parsedDescription = parseDescription(description);\n  return /*#__PURE__*/_jsxDEV(JobDetailedPage, {\n    title,\n    salary: parsedSalary,\n    date,\n    description: parsedDescription,\n    pictures,\n    benefits,\n    employment_type,\n    onSetTag,\n    location\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_c = JobDetailedContainer;\nconst mapStatetoProps = state => ({\n  currentJob: selectCurrentJob(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSetTag: tag => {\n    dispatch(setTag(tag));\n  }\n});\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobDetailedContainer);\nvar _c;\n$RefreshReg$(_c, \"JobDetailedContainer\");","map":{"version":3,"names":["React","connect","selectCurrentJob","setTag","countDate","JobDetailedPage","getGeocode","data","lat","long","JobDetailedContainer","props","currentJob","onSetTag","parseSalary","replaceAll","parseDescription","date","parsedData","parsedText","split","map","item","trimStart","trimEnd","filter","i","length","current","next","includes","push","indexOf","title","salary","description","createdAt","updatedAt","benefits","employment_type","pictures","location","Math","floor","random","lng","then","console","log","parsedSalary","parsedDescription","mapStatetoProps","state","mapDispatchToProps","dispatch","tag"],"sources":["/Users/o.g_vlad/vscode/job-app/src/JobDetailed/JobDetailedContainer.tsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { JobType, selectCurrentJob, setTag } from \"../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport { countDate } from \"../Job/Job\";\nimport JobDetailedPage from \"./JobDetailedPage\";\nimport { getGeocode, getLatLng } from \"use-places-autocomplete\";\n\nconst data = [\n  {\n    lat: 24.47,\n    long: 54.37,\n  },\n  {\n    lat: 49.61,\n    long: 6.13,\n  },\n  {\n    lat: 37.98,\n    long: 23.73,\n  },\n  {\n    lat: 40.38,\n    long: 49.89,\n  },\n  {\n    lat: 52.52,\n    long: 13.41,\n  },\n  {\n    lat: 39.91,\n    long: 116.4,\n  },\n  {\n    lat: 59.91,\n    long: 10.75,\n  },\n  {\n    lat: 60.17,\n    long: 24.94,\n  },\n];\n\ntype JobDetailedContainerProps = {\n  currentJob: JobType | null;\n  onSetTag: (tag: string) => void;\n};\n\nconst JobDetailedContainer: React.FC<JobDetailedContainerProps> = (\n  props: JobDetailedContainerProps\n) => {\n  const { currentJob, onSetTag } = props;\n\n  const parseSalary = (data: string): string => data.replaceAll(\"k\", \" 000\");\n\n  const parseDescription = (date: string): Array<Array<string>> => {\n    const parsedData: Array<Array<string>> = [];\n    const parsedText = date\n      .split(/\\r\\n|\\t|\\r|\\n/g)\n      .map((item) => item.trimStart().trimEnd())\n      .filter((item) => item !== \"\");\n    for (let i = 0; i < parsedText.length; i++) {\n      const current = parsedText[i];\n      const next = parsedText[i + 1];\n      if (current.includes(\":\") && !next.includes(\":\")) {\n        parsedData.push([current, next]);\n        i = parsedText.indexOf(next);\n        continue;\n      }\n      parsedData.push([current]);\n    }\n    return parsedData;\n  };\n\n  if (!currentJob) return <div>pidor</div>;\n  const {\n    title,\n    salary,\n    description,\n    createdAt,\n    updatedAt,\n    benefits,\n    employment_type,\n    pictures,\n  } = currentJob;\n  const location = data[Math.floor(Math.random() * data.length)];\n\n  getGeocode({\n    location: {\n      lat: location.lat,\n      lng: location.long,\n    },\n  }).then((data) => console.log(data[0]));\n\n  const date = countDate(createdAt, updatedAt);\n  const parsedSalary = parseSalary(salary);\n  const parsedDescription = parseDescription(description);\n  return (\n    <JobDetailedPage\n      {...{\n        title,\n        salary: parsedSalary,\n        date,\n        description: parsedDescription,\n        pictures,\n        benefits,\n        employment_type,\n        onSetTag,\n        location,\n      }}\n    />\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  currentJob: selectCurrentJob(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSetTag: (tag: string) => {\n    dispatch(setTag(tag));\n  },\n});\n\nexport default connect(\n  mapStatetoProps,\n  mapDispatchToProps\n)(JobDetailedContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}