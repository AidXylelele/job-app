{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nconst geoLocation = require(\"use-places-autocomplete\");\nimport { locations } from \"../data/locations\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\n\n// args[0] - key\n// args[args.length-1] - callback\nconst memoizeAsync = (lib, fnName) => {\n  const fn = lib[fnName];\n  const cache = {};\n  console.log(\"override\", fnName);\n  lib[fnName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    console.dir({\n      call: fnName,\n      args,\n      cache\n    });\n    const cb = args.pop();\n    const key = args[0];\n    const record = cache[key];\n    console.log(\"key:\", key);\n    console.log(\"cached:\", record);\n    if (record) {\n      console.log(\"from cache\");\n      cb(record.err, record.data);\n      return;\n    }\n    fn(...args, (err, data) => {\n      console.log(\"from file\");\n      console.log(\"Save key:\", key);\n      cache[key] = {\n        err,\n        data\n      };\n      console.dir({\n        cache\n      });\n      cb(err, data);\n    });\n  };\n};\n\n// Usage\n\n// const formAddress = async (list: JobType[]): Promise<any> => {\n//   const res: string[] = [];\n//   const size = 2;\n//   const subarray: JobType[][] = [];\n//   console.log(\"pidoar\");\n//   for (let i = 0; i < Math.ceil(list.length / size); i++) {\n//     subarray[i] = list.slice(i * size, i * size + size);\n//   }\n\n//   for await (let el of subarray) {\n//     for await (let item of el) {\n//       await new Promise<void>(async (resolve) => {\n//         setTimeout(() => {\n//           resolve();\n//         }, 200);\n//         getGeocode({\n//           location: item.location,\n//         }).then((data) => res.push(data[0].formatted_address));\n//       });\n//     }\n//   }\n\n//   return res;\n// };\n\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  let list = await getJobsRequest();\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n  memoizeAsync(geoLocation, \"getGeocode\");\n  for (let item of list) {\n    geoLocation.getGeocode({\n      location: item.location\n    }).then(data => console.log(data));\n  }\n\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","geoLocation","require","locations","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","memoizeAsync","lib","fnName","fn","cache","console","log","args","dir","call","cb","pop","key","record","err","data","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","map","idx","location","getGeocode","then","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nconst geoLocation = require(\"use-places-autocomplete\");\nimport { locations } from \"../data/locations\";\nimport { compareTags } from \"../Job/JobContainer\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\n\n// args[0] - key\n// args[args.length-1] - callback\nconst memoizeAsync = (\n  lib: { [x: string]: (...args: any[]) => void },\n  fnName: string\n) => {\n  const fn = lib[fnName];\n  const cache: any = {};\n  console.log(\"override\", fnName);\n  lib[fnName] = (...args) => {\n    console.dir({ call: fnName, args, cache });\n    const cb = args.pop();\n    const key = args[0];\n    const record = cache[key];\n    console.log(\"key:\", key);\n    console.log(\"cached:\", record);\n    if (record) {\n      console.log(\"from cache\");\n      cb(record.err, record.data);\n      return;\n    }\n    fn(...args, (err: any, data: any) => {\n      console.log(\"from file\");\n      console.log(\"Save key:\", key);\n      cache[key] = { err, data };\n      console.dir({ cache });\n      cb(err, data);\n    });\n  };\n};\n\n// Usage\n\n// const formAddress = async (list: JobType[]): Promise<any> => {\n//   const res: string[] = [];\n//   const size = 2;\n//   const subarray: JobType[][] = [];\n//   console.log(\"pidoar\");\n//   for (let i = 0; i < Math.ceil(list.length / size); i++) {\n//     subarray[i] = list.slice(i * size, i * size + size);\n//   }\n\n//   for await (let el of subarray) {\n//     for await (let item of el) {\n//       await new Promise<void>(async (resolve) => {\n//         setTimeout(() => {\n//           resolve();\n//         }, 200);\n//         getGeocode({\n//           location: item.location,\n//         }).then((data) => res.push(data[0].formatted_address));\n//       });\n//     }\n//   }\n\n//   return res;\n// };\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  let list = await getJobsRequest();\n\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n\n  memoizeAsync(geoLocation, \"getGeocode\");\n\n  for (let item of list) {\n    geoLocation\n      .getGeocode({\n        location: item.location,\n      })\n      .then((data: any) => console.log(data));\n  }\n\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\n\nexport default jobsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}