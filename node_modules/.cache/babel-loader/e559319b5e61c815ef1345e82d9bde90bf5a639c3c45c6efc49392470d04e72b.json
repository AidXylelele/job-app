{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\nlet render = 0;\nconst formAddress = async list => {\n  const res = [];\n  const size = 2;\n  const subarray = [];\n  render += 1;\n  for (let i = 0; i < Math.ceil(list.length / size); i++) {\n    subarray[i] = list.slice(i * size, i * size + size);\n  }\n  console.log(subarray);\n  if (render > 1) {\n    for await (let el of subarray) {\n      await new Promise(async resolve => {\n        for (let item of el) {\n          setTimeout(() => resolve(), 1000);\n          await getGeocode({\n            location: item.location\n          }).then(data => res.push(data[0].formatted_address));\n        }\n      });\n    }\n  }\n  return res;\n  // try {\n  //   const res = getGeocode({\n  //     location,\n  //   });\n  //   resolve(res);\n  // } catch (error) {\n  //   setTimeout(() => {\n  //     const res = getGeocode({\n  //       location,\n  //     });\n  //     resolve(res);\n  //   }, 200);\n  // }\n};\n\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  let list = await getJobsRequest();\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n  const data = await formAddress(list);\n  console.log(data);\n\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","getGeocode","locations","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","render","formAddress","res","size","subarray","i","Math","ceil","length","slice","console","log","el","Promise","resolve","setTimeout","location","then","data","formatted_address","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","map","idx","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\nlet render = 0;\nconst formAddress = async (list: JobType[]): Promise<any> => {\n  const res: string[] = [];\n  const size = 2;\n  const subarray: JobType[][] = [];\n  render += 1;\n  for (let i = 0; i < Math.ceil(list.length / size); i++) {\n    subarray[i] = list.slice(i * size, i * size + size);\n  }\n  console.log(subarray);\n  if (render > 1) {\n    for await (let el of subarray) {\n      await new Promise<void>(async (resolve) => {\n        for (let item of el) {\n          setTimeout(() => resolve(), 1000);\n          await getGeocode({\n            location: item.location,\n          }).then((data) => res.push(data[0].formatted_address));\n        }\n      });\n    }\n  }\n\n  return res;\n  // try {\n  //   const res = getGeocode({\n  //     location,\n  //   });\n  //   resolve(res);\n  // } catch (error) {\n  //   setTimeout(() => {\n  //     const res = getGeocode({\n  //       location,\n  //     });\n  //     resolve(res);\n  //   }, 200);\n  // }\n};\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  let list = await getJobsRequest();\n\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n\n  const data = await formAddress(list);\n  console.log(data);\n\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\n\nexport default jobsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}