{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { selectCurrnetTags, selectJobsList, setCurrentJob, setTag } from \"../redux/jobSlice\";\nimport Job from \"./Job\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst compareTags = (first, second) => {\n  for (const element of first) {\n    if (!second.includes(element)) return false;\n  }\n  return true;\n};\nconst sortJobs = (list, selectedTags) => {\n  const res = [];\n  for (const job of list) {\n    const {\n      benefits,\n      employment_type\n    } = job;\n    const jobTags = benefits.concat(employment_type);\n    if (compareTags(selectedTags, jobTags)) {\n      res.push(job);\n    }\n  }\n  return res;\n};\nconst JobContainer = props => {\n  const {\n    list,\n    tags,\n    onSetCurrentJob,\n    onSetTag\n  } = props;\n  const sortedList = sortJobs(list, tags);\n  const getFormattedAddress = async location => {\n    let address = \"\";\n    await getGeocode({\n      location\n    }).then(data => {\n      return data[0].formatted_address;\n    }).then(formattedAddress => {\n      address = formattedAddress;\n    });\n    console.log(address);\n    return address;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!tags.length ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(AdditionalInfo, {\n      title: \"Tags\",\n      data: [{\n        heading: \"Selected tags\",\n        elements: tags,\n        style: \"max-w-1/3 min-w-fit text-center p-3 w-1/5 border border-blue-500 rounded-xl text-blue-500 bg-blue-100  hover:bg-blue-300 active:ring-4 focus:ring-blue-300\"\n      }],\n      onSetTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), sortedList.length ? sortedList.map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: {\n        ...item\n      },\n      country: getFormattedAddress(item.location),\n      onSetCurrentJob: onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)) : list.map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: {\n        ...item\n      },\n      country: getFormattedAddress(item.location),\n      onSetCurrentJob: onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c = JobContainer;\nconst mapStatetoProps = state => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSetCurrentJob: data => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: tag => {\n    dispatch(setTag(tag));\n  }\n});\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\nvar _c;\n$RefreshReg$(_c, \"JobContainer\");","map":{"version":3,"names":["React","connect","getGeocode","AdditionalInfo","selectCurrnetTags","selectJobsList","setCurrentJob","setTag","Job","compareTags","first","second","element","includes","sortJobs","list","selectedTags","res","job","benefits","employment_type","jobTags","concat","push","JobContainer","props","tags","onSetCurrentJob","onSetTag","sortedList","getFormattedAddress","location","address","then","data","formatted_address","formattedAddress","console","log","length","title","heading","elements","style","map","item","idx","mapStatetoProps","state","mapDispatchToProps","dispatch","tag"],"sources":["/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport {\n  JobType,\n  LocationType,\n  selectCurrnetTags,\n  selectJobsList,\n  setCurrentJob,\n  setTag,\n} from \"../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport Job from \"./Job\";\n\ntype JobContainerProps = {\n  list: JobType[];\n  tags: Array<string>;\n  onSetCurrentJob: (data: JobType) => void;\n  onSetTag: (tag: string) => void;\n};\n\nconst compareTags = (first: Array<string>, second: Array<string>): boolean => {\n  for (const element of first) {\n    if (!second.includes(element)) return false;\n  }\n  return true;\n};\n\nconst sortJobs = (\n  list: Array<JobType>,\n  selectedTags: Array<string>\n): Array<JobType> => {\n  const res: Array<JobType> = [];\n  for (const job of list) {\n    const { benefits, employment_type } = job;\n    const jobTags = benefits.concat(employment_type);\n    if (compareTags(selectedTags, jobTags)) {\n      res.push(job);\n    }\n  }\n  return res;\n};\n\nconst JobContainer: React.FC<JobContainerProps> = (\n  props: JobContainerProps\n) => {\n  const { list, tags, onSetCurrentJob, onSetTag } = props;\n  const sortedList = sortJobs(list, tags);\n\n  const getFormattedAddress = async (location: LocationType) => {\n    let address = \"\";\n    await getGeocode({\n      location,\n    })\n      .then((data) => {\n        return data[0].formatted_address;\n      })\n      .then((formattedAddress) => {\n        address = formattedAddress;\n      });\n    console.log(address);\n    return address;\n  };\n\n  return (\n    <div>\n      {!tags.length ? (\n        <></>\n      ) : (\n        <AdditionalInfo\n          {...{\n            title: \"Tags\",\n            data: [\n              {\n                heading: \"Selected tags\",\n                elements: tags,\n                style:\n                  \"max-w-1/3 min-w-fit text-center p-3 w-1/5 border border-blue-500 rounded-xl text-blue-500 bg-blue-100  hover:bg-blue-300 active:ring-4 focus:ring-blue-300\",\n              },\n            ],\n            onSetTag,\n          }}\n        />\n      )}\n      {sortedList.length\n        ? sortedList.map((item: JobType, idx) => (\n            <Job\n              data={{ ...item }}\n              country={getFormattedAddress(item.location)}\n              onSetCurrentJob={onSetCurrentJob}\n              key={idx}\n            />\n          ))\n        : list.map((item: JobType, idx) => (\n            <Job\n              data={{ ...item }}\n              country={getFormattedAddress(item.location)}\n              onSetCurrentJob={onSetCurrentJob}\n              key={idx}\n            />\n          ))}\n    </div>\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSetCurrentJob: (data: JobType) => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: (tag: string) => {\n    dispatch(setTag(tag));\n  },\n});\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}