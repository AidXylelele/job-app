{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx\",\n  _s = $RefreshSig$();\nimport { SvgIcon } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport iconPath from \"../data/svgIcons\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { usePagination } from \"../redux/hooks\";\nimport { selectCurrnetTags, selectJobsList, setCurrentJob, setTag } from \"../redux/jobSlice\";\nimport { Utils } from \"../utils/utils\";\nimport Job from \"./Job\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobContainer = props => {\n  _s();\n  const [list, setList] = useState([]);\n  const [tags, setTags] = useState([]);\n  const sortedList = Utils.sortJobs(list, tags);\n  const {\n    firstContentIndex,\n    lastContentIndex,\n    nextPage,\n    prevPage,\n    page,\n    setPage,\n    totalPages\n  } = usePagination({\n    contentPerPage: 4,\n    count: tags ? sortedList.length : list.length\n  });\n  useEffect(() => {\n    setList(props.list);\n    setTags(props.tags);\n  }, [props.list, props.tags]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!tags.length ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(AdditionalInfo, {\n      title: \"Tags\",\n      data: [{\n        heading: \"Selected tags\",\n        elements: tags,\n        style: \"max-w-1/3 min-w-fit text-center p-3 w-1/5 border border-blue-500 rounded-xl text-blue-500 bg-blue-100  hover:bg-blue-300 active:ring-4 focus:ring-blue-300\"\n      }],\n      onSetTag: props.onSetTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), sortedList.length ? sortedList.slice(firstContentIndex, lastContentIndex).map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: {\n        ...item\n      },\n      onSetCurrentJob: props.onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }, this)) : list.map((item, idx) => /*#__PURE__*/_jsxDEV(Job, {\n      data: {\n        ...item\n      },\n      onSetCurrentJob: props.onSetCurrentJob\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text\",\n        children: [page, \"/\", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevPage,\n        className: \"page\",\n        children: /*#__PURE__*/_jsxDEV(SvgIcon, {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: iconPath.leftArrow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), [...Array(totalPages).keys()].map(el => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(el + 1),\n        className: `page ${page === el + 1 ? \"active\" : \"\"}`,\n        children: el + 1\n      }, el, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPage,\n        className: \"page\",\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(JobContainer, \"/BbG0sNjRVMgjOm69gpxPYWDujM=\", false, function () {\n  return [usePagination];\n});\n_c = JobContainer;\nconst mapStatetoProps = state => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSetCurrentJob: data => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: tag => {\n    dispatch(setTag(tag));\n  }\n});\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\nvar _c;\n$RefreshReg$(_c, \"JobContainer\");","map":{"version":3,"names":["SvgIcon","React","useEffect","useState","connect","iconPath","AdditionalInfo","usePagination","selectCurrnetTags","selectJobsList","setCurrentJob","setTag","Utils","Job","JobContainer","props","list","setList","tags","setTags","sortedList","sortJobs","firstContentIndex","lastContentIndex","nextPage","prevPage","page","setPage","totalPages","contentPerPage","count","length","title","data","heading","elements","style","onSetTag","slice","map","item","idx","onSetCurrentJob","leftArrow","Array","keys","el","mapStatetoProps","state","mapDispatchToProps","dispatch","tag"],"sources":["/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx"],"sourcesContent":["import { SvgIcon } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport iconPath from \"../data/svgIcons\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { usePagination } from \"../redux/hooks\";\nimport {\n  JobType,\n  selectCurrnetTags,\n  selectJobsList,\n  setCurrentJob,\n  setTag,\n} from \"../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport { Utils } from \"../utils/utils\";\nimport Job from \"./Job\";\n\ninterface JobContainerProps {\n  list: JobType[];\n  tags: string[];\n  onSetCurrentJob: (data: JobType) => void;\n  onSetTag: (tag: string) => void;\n}\n\nconst JobContainer: React.FC<JobContainerProps> = (\n  props: JobContainerProps\n) => {\n  const [list, setList] = useState<JobType[]>([]);\n  const [tags, setTags] = useState<string[]>([]);\n  const sortedList = Utils.sortJobs(list, tags);\n  const {\n    firstContentIndex,\n    lastContentIndex,\n    nextPage,\n    prevPage,\n    page,\n    setPage,\n    totalPages,\n  } = usePagination({\n    contentPerPage: 4,\n    count: tags ? sortedList.length : list.length,\n  });\n\n  useEffect(() => {\n    setList(props.list);\n    setTags(props.tags);\n  }, [props.list, props.tags]);\n\n  return (\n    <div>\n      {!tags.length ? (\n        <></>\n      ) : (\n        <AdditionalInfo\n          {...{\n            title: \"Tags\",\n            data: [\n              {\n                heading: \"Selected tags\",\n                elements: tags,\n                style:\n                  \"max-w-1/3 min-w-fit text-center p-3 w-1/5 border border-blue-500 rounded-xl text-blue-500 bg-blue-100  hover:bg-blue-300 active:ring-4 focus:ring-blue-300\",\n              },\n            ],\n            onSetTag: props.onSetTag,\n          }}\n        />\n      )}\n      {sortedList.length\n        ? sortedList\n            .slice(firstContentIndex, lastContentIndex)\n            .map((item: JobType, idx) => (\n              <Job\n                data={{ ...item }}\n                onSetCurrentJob={props.onSetCurrentJob}\n                key={idx}\n              />\n            ))\n        : list.map((item: JobType, idx) => (\n            <Job\n              data={{ ...item }}\n              onSetCurrentJob={props.onSetCurrentJob}\n              key={idx}\n            />\n          ))}\n      <div className=\"pagination\">\n        <p className=\"text\">\n          {page}/{totalPages}\n        </p>\n        <button onClick={prevPage} className=\"page\">\n          <SvgIcon>\n            <path d={iconPath.leftArrow} />\n          </SvgIcon>\n        </button>\n        {/* @ts-ignore */}\n        {[...Array(totalPages).keys()].map((el) => (\n          <button\n            onClick={() => setPage(el + 1)}\n            key={el}\n            className={`page ${page === el + 1 ? \"active\" : \"\"}`}\n          >\n            {el + 1}\n          </button>\n        ))}\n        <button onClick={nextPage} className=\"page\">\n          &rarr;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSetCurrentJob: (data: JobType) => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: (tag: string) => {\n    dispatch(setTag(tag));\n  },\n});\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}