{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { getGeocode } from \"use-places-autocomplete\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n    setCurrentJobMainAddress: (state, action) => {}\n  }\n});\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag,\n  setCurrentJobMainAddress\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  const asyncResp = await getJobsRequest();\n  dispatch(setJobsList(asyncResp));\n};\nexport const thunkSetMainAddress = location => async dispatch => {\n  var _s = $RefreshSig$();\n  new Promise(_s(() => {\n    _s();\n    const {\n      isLoaded\n    } = useJsApiLoader({\n      id: \"google-map-script\",\n      googleMapsApiKey: \"AIzaSyAIzLyy4E4BOyVowNMi850bDZK3Bo2dgyE\"\n    });\n    if (isLoaded) {\n      getGeocode({\n        location\n      }).then(data => {\n        return data[0].formatted_address;\n      }).then(data => {\n        dispatch(setCurrentJobMainAddress(data));\n      });\n    }\n  }, \"mLN67oIZdYDfCjxG2Fcvbwz7Mfk=\", false, function () {\n    return [useJsApiLoader];\n  }));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","useJsApiLoader","getGeocode","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","setCurrentJobMainAddress","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","asyncResp","thunkSetMainAddress","location","Promise","isLoaded","id","googleMapsApiKey","then","data","formatted_address","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nimport { getGeocode } from \"use-places-autocomplete\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  mainAddress: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n    setCurrentJobMainAddress: (state, action: PayloadAction<string>) => {},\n  },\n});\n\nexport const { setJobsList, setCurrentJob, setTag, setCurrentJobMainAddress } =\n  jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  const asyncResp = await getJobsRequest();\n  dispatch(setJobsList(asyncResp));\n};\n\nexport const thunkSetMainAddress =\n  (location: LocationType): AppThunk =>\n  async (dispatch) => {\n    new Promise(() => {\n      const { isLoaded } = useJsApiLoader({\n        id: \"google-map-script\",\n        googleMapsApiKey: \"AIzaSyAIzLyy4E4BOyVowNMi850bDZK3Bo2dgyE\",\n      });\n      if (isLoaded) {\n        getGeocode({\n          location,\n        })\n          .then((data) => {\n            return data[0].formatted_address;\n          })\n          .then((data) => {\n            dispatch(setCurrentJobMainAddress(data));\n          });\n      }\n    });\n  };\n\nexport default jobsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAOC,cAAc,MAAM,0BAA0B;AACrD,SAASC,cAAc,QAAQ,wBAAwB;AAEvD,SAASC,UAAU,QAAQ,yBAAyB;AA+BpD,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAI;EAChBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;EACnCS,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAK,EAAEC,MAAqC,KAAK;MAC7DD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,aAAa,EAAE,CAACH,KAAK,EAAEC,MAA8B,KAAK;MACxDD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDE,MAAM,EAAE,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MAChD,MAAMI,GAAG,GAAGJ,MAAM,CAACC,OAAO;MAC1B,IAAIF,KAAK,CAACL,IAAI,CAACW,QAAQ,CAACD,GAAG,CAAC,EAAE;QAC5BL,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACY,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKH,GAAG,CAAC;MACxD,CAAC,MAAM;QACLL,KAAK,CAACL,IAAI,CAACc,IAAI,CAACJ,GAAG,CAAC;MACtB;IACF,CAAC;IACDK,wBAAwB,EAAE,CAACV,KAAK,EAAEC,MAA6B,KAAK,CAAC;EACvE;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF,WAAW;EAAEI,aAAa;EAAEC,MAAM;EAAEM;AAAyB,CAAC,GAC3Ed,SAAS,CAACe,OAAO;AAEnB,OAAO,MAAMC,cAAc,GAAIZ,KAAgB,IAAKA,KAAK,CAACa,IAAI,CAACpB,IAAI;AACnE,OAAO,MAAMqB,gBAAgB,GAAId,KAAgB,IAAKA,KAAK,CAACa,IAAI,CAACnB,UAAU;AAC3E,OAAO,MAAMqB,iBAAiB,GAAIf,KAAgB,IAAKA,KAAK,CAACa,IAAI,CAAClB,IAAI;AAEtE,OAAO,MAAMqB,YAAY,GAAG,MAAgB,MAAOC,QAAQ,IAAK;EAC9D,MAAMC,SAAS,GAAG,MAAM7B,cAAc,EAAE;EACxC4B,QAAQ,CAAClB,WAAW,CAACmB,SAAS,CAAC,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAC7BC,QAAsB,IACvB,MAAOH,QAAQ,IAAK;EAAA;EAClB,IAAII,OAAO,IAAC,MAAM;IAAA;IAChB,MAAM;MAAEC;IAAS,CAAC,GAAGhC,cAAc,CAAC;MAClCiC,EAAE,EAAE,mBAAmB;MACvBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IACF,IAAIF,QAAQ,EAAE;MACZ/B,UAAU,CAAC;QACT6B;MACF,CAAC,CAAC,CACCK,IAAI,CAAEC,IAAI,IAAK;QACd,OAAOA,IAAI,CAAC,CAAC,CAAC,CAACC,iBAAiB;MAClC,CAAC,CAAC,CACDF,IAAI,CAAEC,IAAI,IAAK;QACdT,QAAQ,CAACP,wBAAwB,CAACgB,IAAI,CAAC,CAAC;MAC1C,CAAC,CAAC;IACN;EACF,CAAC;IAAA,QAfsBpC,cAAc;EAAA,GAenC;AACJ,CAAC;AAEH,eAAeM,SAAS,CAACgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}