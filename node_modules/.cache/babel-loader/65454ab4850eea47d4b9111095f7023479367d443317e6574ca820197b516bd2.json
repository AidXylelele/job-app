{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  const list = await getJobsRequest();\n  list.map(item => {\n    item.location = locations[Math.floor(Math.random() * locations.length)];\n    return item;\n  }).map(async (item, idx) => {\n    let formattedAddress = \"\";\n    if (idx % 4 == 0) {\n      await new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n        }, 3000);\n      });\n    }\n    await getGeocode({\n      location: item.location\n    }).then(data => {\n      return formattedAddress = data[0].formatted_address;\n    });\n    return {\n      ...item,\n      address: formattedAddress\n    };\n  });\n  dispatch(setJobsList(list));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","getGeocode","locations","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","map","location","Math","floor","random","length","idx","formattedAddress","Promise","resolve","setTimeout","then","data","formatted_address","address","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  const list = await getJobsRequest();\n  list\n    .map((item) => {\n      item.location = locations[Math.floor(Math.random() * locations.length)];\n      return item;\n    })\n    .map(async (item, idx) => {\n      let formattedAddress = \"\";\n      if (idx % 4 == 0) {\n        await new Promise<void>((resolve) => {\n          setTimeout(() => {\n            resolve();\n          }, 3000);\n        });\n      }\n      await getGeocode({\n        location: item.location,\n      }).then((data) => {\n        return (formattedAddress = data[0].formatted_address);\n      });\n      return { ...item, address: formattedAddress };\n    });\n  dispatch(setJobsList(list));\n};\n\nexport default jobsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAOC,cAAc,MAAM,0BAA0B;AAGrD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,SAAS,QAAQ,mBAAmB;AA8B7C,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAI;EAChBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;EACnCS,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAK,EAAEC,MAAqC,KAAK;MAC7DD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,aAAa,EAAE,CAACH,KAAK,EAAEC,MAA8B,KAAK;MACxDD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDE,MAAM,EAAE,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MAChD,MAAMI,GAAG,GAAGJ,MAAM,CAACC,OAAO;MAC1B,IAAIF,KAAK,CAACL,IAAI,CAACW,QAAQ,CAACD,GAAG,CAAC,EAAE;QAC5BL,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACY,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKH,GAAG,CAAC;MACxD,CAAC,MAAM;QACLL,KAAK,CAACL,IAAI,CAACc,IAAI,CAACJ,GAAG,CAAC;MACtB;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,WAAW;EAAEI,aAAa;EAAEC;AAAO,CAAC,GAAGR,SAAS,CAACc,OAAO;AAEvE,OAAO,MAAMC,cAAc,GAAIX,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAACnB,IAAI;AACnE,OAAO,MAAMoB,gBAAgB,GAAIb,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAAClB,UAAU;AAC3E,OAAO,MAAMoB,iBAAiB,GAAId,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAACjB,IAAI;AAEtE,OAAO,MAAMoB,YAAY,GAAG,MAAgB,MAAOC,QAAQ,IAAK;EAC9D,MAAMvB,IAAI,GAAG,MAAMJ,cAAc,EAAE;EACnCI,IAAI,CACDwB,GAAG,CAAET,IAAI,IAAK;IACbA,IAAI,CAACU,QAAQ,GAAG3B,SAAS,CAAC4B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG9B,SAAS,CAAC+B,MAAM,CAAC,CAAC;IACvE,OAAOd,IAAI;EACb,CAAC,CAAC,CACDS,GAAG,CAAC,OAAOT,IAAI,EAAEe,GAAG,KAAK;IACxB,IAAIC,gBAAgB,GAAG,EAAE;IACzB,IAAID,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;MAChB,MAAM,IAAIE,OAAO,CAAQC,OAAO,IAAK;QACnCC,UAAU,CAAC,MAAM;UACfD,OAAO,EAAE;QACX,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;IACJ;IACA,MAAMpC,UAAU,CAAC;MACf4B,QAAQ,EAAEV,IAAI,CAACU;IACjB,CAAC,CAAC,CAACU,IAAI,CAAEC,IAAI,IAAK;MAChB,OAAQL,gBAAgB,GAAGK,IAAI,CAAC,CAAC,CAAC,CAACC,iBAAiB;IACtD,CAAC,CAAC;IACF,OAAO;MAAE,GAAGtB,IAAI;MAAEuB,OAAO,EAAEP;IAAiB,CAAC;EAC/C,CAAC,CAAC;EACJR,QAAQ,CAACjB,WAAW,CAACN,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED,eAAeG,SAAS,CAACoC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}