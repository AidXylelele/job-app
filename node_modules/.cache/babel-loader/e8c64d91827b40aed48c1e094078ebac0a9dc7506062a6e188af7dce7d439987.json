{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { locations } from \"../data/locations\";\nconst geoLocation = require(\"use-places-autocomplete\");\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\n\n// const formAddress = async (list: JobType[]): Promise<any> => {\n//   const res: string[] = [];\n//   const size = 2;\n//   const subarray: JobType[][] = [];\n//   console.log(\"pidoar\");\n//   for (let i = 0; i < Math.ceil(list.length / size); i++) {\n//     subarray[i] = list.slice(i * size, i * size + size);\n//   }\n\n//   for await (let el of subarray) {\n//     for await (let item of el) {\n//       await new Promise<void>(async (resolve) => {\n//         setTimeout(() => {\n//           resolve();\n//         }, 200);\n//         getGeocode({\n//           location: item.location,\n//         }).then((data) => res.push(data[0].formatted_address));\n//       });\n//     }\n//   }\n\n//   return res;\n// };\n\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  let list = await getJobsRequest();\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n  for await (let item of list) {\n    geoLocation.getGeocode({\n      location: item.location\n    }).then(data => console.log(data));\n  }\n\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","locations","geoLocation","require","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","map","idx","location","getGeocode","then","data","console","log","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { locations } from \"../data/locations\";\nconst geoLocation = require(\"use-places-autocomplete\");\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\n\n// const formAddress = async (list: JobType[]): Promise<any> => {\n//   const res: string[] = [];\n//   const size = 2;\n//   const subarray: JobType[][] = [];\n//   console.log(\"pidoar\");\n//   for (let i = 0; i < Math.ceil(list.length / size); i++) {\n//     subarray[i] = list.slice(i * size, i * size + size);\n//   }\n\n//   for await (let el of subarray) {\n//     for await (let item of el) {\n//       await new Promise<void>(async (resolve) => {\n//         setTimeout(() => {\n//           resolve();\n//         }, 200);\n//         getGeocode({\n//           location: item.location,\n//         }).then((data) => res.push(data[0].formatted_address));\n//       });\n//     }\n//   }\n\n//   return res;\n// };\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  let list = await getJobsRequest();\n\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n\n  for await (let item of list) {\n    geoLocation\n      .getGeocode({\n        location: item.location,\n      })\n      .then((data: any) => console.log(data));\n  }\n\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\n\nexport default jobsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAOC,cAAc,MAAM,0BAA0B;AACrD,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,MAAMC,WAAW,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AA8BtD,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAI;EAChBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;EACnCU,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAK,EAAEC,MAAqC,KAAK;MAC7DD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,aAAa,EAAE,CAACH,KAAK,EAAEC,MAA8B,KAAK;MACxDD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDE,MAAM,EAAE,CAACJ,KAAK,EAAEC,MAA6B,KAAK;MAChD,MAAMI,GAAG,GAAGJ,MAAM,CAACC,OAAO;MAC1B,IAAIF,KAAK,CAACL,IAAI,CAACW,QAAQ,CAACD,GAAG,CAAC,EAAE;QAC5BL,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACY,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKH,GAAG,CAAC;MACxD,CAAC,MAAM;QACLL,KAAK,CAACL,IAAI,CAACc,IAAI,CAACJ,GAAG,CAAC;MACtB;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAM;EAAEN,WAAW;EAAEI,aAAa;EAAEC;AAAO,CAAC,GAAGR,SAAS,CAACc,OAAO;AAEvE,OAAO,MAAMC,cAAc,GAAIX,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAACnB,IAAI;AACnE,OAAO,MAAMoB,gBAAgB,GAAIb,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAAClB,UAAU;AAC3E,OAAO,MAAMoB,iBAAiB,GAAId,KAAgB,IAAKA,KAAK,CAACY,IAAI,CAACjB,IAAI;AAEtE,OAAO,MAAMoB,YAAY,GAAG,MAAgB,MAAOC,QAAQ,IAAK;EAC9D,IAAIvB,IAAI,GAAG,MAAML,cAAc,EAAE;EAEjCK,IAAI,CAACwB,GAAG,CAAC,CAACT,IAAI,EAAEU,GAAG,KAAK;IACtBV,IAAI,CAACW,QAAQ,GAAG9B,SAAS,CAAC6B,GAAG,CAAC;IAC9B,OAAOV,IAAI;EACb,CAAC,CAAC;EAEF,WAAW,IAAIA,IAAI,IAAIf,IAAI,EAAE;IAC3BH,WAAW,CACR8B,UAAU,CAAC;MACVD,QAAQ,EAAEX,IAAI,CAACW;IACjB,CAAC,CAAC,CACDE,IAAI,CAAEC,IAAS,IAAKC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC;EAC3C;;EAEA;EACA;EACA;EACA;EACA;;EAEAN,QAAQ,CAACjB,WAAW,CAACN,IAAI,CAAC,CAAC;AAC7B,CAAC;AAED,eAAeG,SAAS,CAAC6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}