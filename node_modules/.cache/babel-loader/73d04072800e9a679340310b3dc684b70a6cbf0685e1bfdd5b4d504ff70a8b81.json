{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\nconst formAddress = async list => {\n  return new Promise(resolve => {\n    const res = [];\n    for (let item of list) {\n      const {\n        location\n      } = item;\n      try {\n        console.log(\"1111\");\n        setTimeout(() => {\n          const address = getGeocode({\n            location\n          });\n          address.then(data => res.push(data[0].formatted_address));\n        }, 200);\n        continue;\n      } catch (error) {\n        setTimeout(() => {\n          const address = getGeocode({\n            location\n          });\n          address.then(data => res.push(data[0].formatted_address));\n        }, 200);\n        continue;\n      }\n    }\n    resolve(res);\n\n    // try {\n    //   const res = getGeocode({\n    //     location,\n    //   });\n    //   resolve(res);\n    // } catch (error) {\n    //   setTimeout(() => {\n    //     const res = getGeocode({\n    //       location,\n    //     });\n    //     resolve(res);\n    //   }, 200);\n    // }\n  });\n};\n\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  let list = await getJobsRequest();\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n  const data = await formAddress(list);\n  console.log(data);\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","getGeocode","locations","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","setCurrentJob","setTag","tag","includes","filter","item","push","formAddress","Promise","resolve","res","location","console","log","setTimeout","address","then","data","formatted_address","error","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","map","idx","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload;\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\n\nconst formAddress = async (list: JobType[]): Promise<any> => {\n  return new Promise((resolve) => {\n    const res: string[] = [];\n    for (let item of list) {\n      const { location } = item;\n      try {\n        console.log(\"1111\");\n        setTimeout(() => {\n          const address = getGeocode({\n            location,\n          });\n          address.then((data) => res.push(data[0].formatted_address));\n        }, 200);\n        continue;\n      } catch (error) {\n        setTimeout(() => {\n          const address = getGeocode({\n            location,\n          });\n          address.then((data) => res.push(data[0].formatted_address));\n        }, 200);\n        continue;\n      }\n    }\n    resolve(res);\n\n    // try {\n    //   const res = getGeocode({\n    //     location,\n    //   });\n    //   resolve(res);\n    // } catch (error) {\n    //   setTimeout(() => {\n    //     const res = getGeocode({\n    //       location,\n    //     });\n    //     resolve(res);\n    //   }, 200);\n    // }\n  });\n};\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  let list = await getJobsRequest();\n\n  list.map((item, idx) => {\n    item.location = locations[idx];\n    return item;\n  });\n  const data = await formAddress(list);\n  console.log(data);\n  // for (let item of list) {\n  //   try {\n  //     await formAddress(item.location).then((data) => console.log(data));\n  //   } catch (error) {}\n  // }\n\n  dispatch(setJobsList(list));\n};\n\nexport default jobsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}