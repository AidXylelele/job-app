{"ast":null,"code":"var _jsxFileName = \"/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport { selectCurrnetTags, selectJobsList, setCurrentJob, setTag } from \"../redux/jobSlice\";\nimport Job from \"./Job\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobContainer = props => {\n  const {\n    list,\n    tags,\n    onSetCurrentJob,\n    onSetTag\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!tags.length ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(AdditionalInfo, {\n      title: \"Tags\",\n      data: [{\n        heading: \"Selected tags\",\n        elements: tags\n      }],\n      onSetTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), list.map((item, idx) => {\n      const {\n        benefits,\n        employment_type\n      } = item;\n      if (tags.includes(...benefits)) {}\n      /*#__PURE__*/_jsxDEV(Job, {\n        data: item,\n        onSetCurrentJob: onSetCurrentJob\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = JobContainer;\nconst mapStatetoProps = state => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSetCurrentJob: data => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: tag => {\n    dispatch(setTag(tag));\n  }\n});\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\nvar _c;\n$RefreshReg$(_c, \"JobContainer\");","map":{"version":3,"names":["React","connect","AdditionalInfo","selectCurrnetTags","selectJobsList","setCurrentJob","setTag","Job","JobContainer","props","list","tags","onSetCurrentJob","onSetTag","length","title","data","heading","elements","map","item","idx","benefits","employment_type","includes","mapStatetoProps","state","mapDispatchToProps","dispatch","tag"],"sources":["/Users/o.g_vlad/vscode/job-app/src/Job/JobContainer.tsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport AdditionalInfo from \"../JobDetailed/AdditionalInfo/AdditionalInfo\";\nimport {\n  JobType,\n  selectCurrnetTags,\n  selectJobsList,\n  setCurrentJob,\n  setTag,\n} from \"../redux/jobSlice\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport Job from \"./Job\";\n\ntype JobContainerProps = {\n  list: JobType[];\n  tags: string[];\n  onSetCurrentJob: (data: JobType) => void;\n  onSetTag: (tag: string) => void;\n};\n\nconst JobContainer: React.FC<JobContainerProps> = (\n  props: JobContainerProps\n) => {\n  const { list, tags, onSetCurrentJob, onSetTag } = props;\n  return (\n    <div>\n      {!tags.length ? (\n        <></>\n      ) : (\n        <AdditionalInfo\n          {...{\n            title: \"Tags\",\n            data: [{ heading: \"Selected tags\", elements: tags }],\n            onSetTag,\n          }}\n        />\n      )}\n      {list.map((item: JobType, idx) => {\n        const { benefits, employment_type } = item;\n        if (tags.includes(...benefits)) {\n        }\n        <Job data={item} onSetCurrentJob={onSetCurrentJob} key={idx} />;\n      })}\n    </div>\n  );\n};\n\nconst mapStatetoProps = (state: RootState) => ({\n  list: selectJobsList(state),\n  tags: selectCurrnetTags(state),\n});\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n  onSetCurrentJob: (data: JobType) => {\n    dispatch(setCurrentJob(data));\n  },\n  onSetTag: (tag: string) => {\n    dispatch(setTag(tag));\n  },\n});\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(JobContainer);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,cAAc,MAAM,8CAA8C;AACzE,SAEEC,iBAAiB,EACjBC,cAAc,EACdC,aAAa,EACbC,MAAM,QACD,mBAAmB;AAE1B,OAAOC,GAAG,MAAM,OAAO;AAAC;AAAA;AASxB,MAAMC,YAAyC,GAC7CC,KAAwB,IACrB;EACH,MAAM;IAAEC,IAAI;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAS,CAAC,GAAGJ,KAAK;EACvD,oBACE;IAAA,WACG,CAACE,IAAI,CAACG,MAAM,gBACX,qCAAK,gBAEL,QAAC,cAAc;MAEXC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,CAAC;QAAEC,OAAO,EAAE,eAAe;QAAEC,QAAQ,EAAEP;MAAK,CAAC,CAAC;MACpDE;IAAQ;MAAA;MAAA;MAAA;IAAA,QAGb,EACAH,IAAI,CAACS,GAAG,CAAC,CAACC,IAAa,EAAEC,GAAG,KAAK;MAChC,MAAM;QAAEC,QAAQ;QAAEC;MAAgB,CAAC,GAAGH,IAAI;MAC1C,IAAIT,IAAI,CAACa,QAAQ,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAChC;MACA,qBAAC,GAAG;QAAC,IAAI,EAAEF,IAAK;QAAC,eAAe,EAAER;MAAgB,GAAMS,GAAG;QAAA;QAAA;QAAA;MAAA,QAAI;IACjE,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KAzBIb,YAAyC;AA2B/C,MAAMiB,eAAe,GAAIC,KAAgB,KAAM;EAC7ChB,IAAI,EAAEN,cAAc,CAACsB,KAAK,CAAC;EAC3Bf,IAAI,EAAER,iBAAiB,CAACuB,KAAK;AAC/B,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAIC,QAAqB,KAAM;EACrDhB,eAAe,EAAGI,IAAa,IAAK;IAClCY,QAAQ,CAACvB,aAAa,CAACW,IAAI,CAAC,CAAC;EAC/B,CAAC;EACDH,QAAQ,EAAGgB,GAAW,IAAK;IACzBD,QAAQ,CAACtB,MAAM,CAACuB,GAAG,CAAC,CAAC;EACvB;AACF,CAAC,CAAC;AAEF,eAAe5B,OAAO,CAACwB,eAAe,EAAEE,kBAAkB,CAAC,CAACnB,YAAY,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}