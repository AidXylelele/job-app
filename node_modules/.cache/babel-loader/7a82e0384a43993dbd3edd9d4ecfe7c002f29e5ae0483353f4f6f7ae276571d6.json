{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { locations } from \"../data/locations\";\nconst initialState = {\n  list: [],\n  currentJob: null,\n  tags: []\n};\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action) => {\n      state.list = action.payload.map(item => {\n        item.location = locations[Math.floor(Math.random() * locations.length)];\n        return item;\n      });\n    },\n    setCurrentJob: (state, action) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter(item => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    }\n  }\n});\nexport const {\n  setJobsList,\n  setCurrentJob,\n  setTag\n} = jobsSlice.actions;\nexport const selectJobsList = state => state.jobs.list;\nexport const selectCurrentJob = state => state.jobs.currentJob;\nexport const selectCurrnetTags = state => state.jobs.tags;\nexport const thunkSetJobs = () => async dispatch => {\n  const list = await getJobsRequest();\n  list.map;\n  dispatch(setJobsList(list));\n};\n\n// export const thunkSetMainAddress =\n//   (location: LocationType): AppThunk =>\n//   async (dispatch) => {\n//     new Promise(() => {\n//       const { isLoaded } = useJsApiLoader({\n//         id: \"google-map-script\",\n//         googleMapsApiKey: \"AIzaSyAIzLyy4E4BOyVowNMi850bDZK3Bo2dgyE\",\n//       });\n//       if (isLoaded) {\n//         getGeocode({\n//           location,\n//         })\n//           .then((data) => {\n//             return data[0].formatted_address;\n//           })\n//           .then((data) => {\n//             dispatch(setCurrentJobMainAddress(data));\n//           });\n//       }\n//     });\n//   };\n\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","getJobsRequest","locations","initialState","list","currentJob","tags","jobsSlice","name","reducers","setJobsList","state","action","payload","map","item","location","Math","floor","random","length","setCurrentJob","setTag","tag","includes","filter","push","actions","selectJobsList","jobs","selectCurrentJob","selectCurrnetTags","thunkSetJobs","dispatch","reducer"],"sources":["/Users/o.g_vlad/vscode/job-app/src/redux/jobSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"./store\";\nimport getJobsRequest from \"../requestAPI/requestAPI\";\nimport { useJsApiLoader } from \"@react-google-maps/api\";\nimport { resolve } from \"path\";\nimport { getGeocode } from \"use-places-autocomplete\";\nimport { locations } from \"../data/locations\";\n\nexport type LocationType = {\n  lat: number;\n  lng: number;\n};\n\nexport type JobType = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  title: string;\n  salary: string;\n  address: string;\n  benefits: Array<string>;\n  location: LocationType;\n  pictures: Array<string>;\n  createdAt: string;\n  updatedAt: string;\n  description: string;\n  employment_type: Array<string>;\n};\n\nexport type JobsState = {\n  list: Array<JobType>;\n  currentJob: JobType | null;\n  tags: Array<string>;\n};\n\nconst initialState: JobsState = {\n  list: [],\n  currentJob: null,\n  tags: [],\n};\n\nexport const jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    setJobsList: (state, action: PayloadAction<Array<JobType>>) => {\n      state.list = action.payload.map((item) => {\n        item.location = locations[Math.floor(Math.random() * locations.length)];\n        return item;\n      });\n    },\n    setCurrentJob: (state, action: PayloadAction<JobType>) => {\n      state.currentJob = action.payload;\n    },\n    setTag: (state, action: PayloadAction<string>) => {\n      const tag = action.payload;\n      if (state.tags.includes(tag)) {\n        state.tags = state.tags.filter((item) => item !== tag);\n      } else {\n        state.tags.push(tag);\n      }\n    },\n  },\n});\n\nexport const { setJobsList, setCurrentJob, setTag } = jobsSlice.actions;\n\nexport const selectJobsList = (state: RootState) => state.jobs.list;\nexport const selectCurrentJob = (state: RootState) => state.jobs.currentJob;\nexport const selectCurrnetTags = (state: RootState) => state.jobs.tags;\n\nexport const thunkSetJobs = (): AppThunk => async (dispatch) => {\n  const list = await getJobsRequest();\n  list.map;\n  dispatch(setJobsList(list));\n};\n\n// export const thunkSetMainAddress =\n//   (location: LocationType): AppThunk =>\n//   async (dispatch) => {\n//     new Promise(() => {\n//       const { isLoaded } = useJsApiLoader({\n//         id: \"google-map-script\",\n//         googleMapsApiKey: \"AIzaSyAIzLyy4E4BOyVowNMi850bDZK3Bo2dgyE\",\n//       });\n//       if (isLoaded) {\n//         getGeocode({\n//           location,\n//         })\n//           .then((data) => {\n//             return data[0].formatted_address;\n//           })\n//           .then((data) => {\n//             dispatch(setCurrentJobMainAddress(data));\n//           });\n//       }\n//     });\n//   };\n\nexport default jobsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAOC,cAAc,MAAM,0BAA0B;AAIrD,SAASC,SAAS,QAAQ,mBAAmB;AA8B7C,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAI;EAChBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;EACnCQ,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAK,EAAEC,MAAqC,KAAK;MAC7DD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO,CAACC,GAAG,CAAEC,IAAI,IAAK;QACxCA,IAAI,CAACC,QAAQ,GAAGd,SAAS,CAACe,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGjB,SAAS,CAACkB,MAAM,CAAC,CAAC;QACvE,OAAOL,IAAI;MACb,CAAC,CAAC;IACJ,CAAC;IACDM,aAAa,EAAE,CAACV,KAAK,EAAEC,MAA8B,KAAK;MACxDD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDS,MAAM,EAAE,CAACX,KAAK,EAAEC,MAA6B,KAAK;MAChD,MAAMW,GAAG,GAAGX,MAAM,CAACC,OAAO;MAC1B,IAAIF,KAAK,CAACL,IAAI,CAACkB,QAAQ,CAACD,GAAG,CAAC,EAAE;QAC5BZ,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACmB,MAAM,CAAEV,IAAI,IAAKA,IAAI,KAAKQ,GAAG,CAAC;MACxD,CAAC,MAAM;QACLZ,KAAK,CAACL,IAAI,CAACoB,IAAI,CAACH,GAAG,CAAC;MACtB;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEb,WAAW;EAAEW,aAAa;EAAEC;AAAO,CAAC,GAAGf,SAAS,CAACoB,OAAO;AAEvE,OAAO,MAAMC,cAAc,GAAIjB,KAAgB,IAAKA,KAAK,CAACkB,IAAI,CAACzB,IAAI;AACnE,OAAO,MAAM0B,gBAAgB,GAAInB,KAAgB,IAAKA,KAAK,CAACkB,IAAI,CAACxB,UAAU;AAC3E,OAAO,MAAM0B,iBAAiB,GAAIpB,KAAgB,IAAKA,KAAK,CAACkB,IAAI,CAACvB,IAAI;AAEtE,OAAO,MAAM0B,YAAY,GAAG,MAAgB,MAAOC,QAAQ,IAAK;EAC9D,MAAM7B,IAAI,GAAG,MAAMH,cAAc,EAAE;EACnCG,IAAI,CAACU,GAAG;EACRmB,QAAQ,CAACvB,WAAW,CAACN,IAAI,CAAC,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeG,SAAS,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}